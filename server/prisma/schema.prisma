// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  email                String    @unique
  username             String    @unique
  password             String?
  avatar               String?
  bio                  String?
  skills               String[]
  socialLinks          Json?
  karmaScore           Int       @default(0)
  emailVerified        Boolean   @default(false)
  emailVerifyToken     String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  isActive             Boolean   @default(true)
  lastLoginAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // User preferences for recommendations
  preferences UserPreferences?

  // OAuth providers
  oauthProviders OAuthProvider[]

  // Relations
  ideas               Idea[]
  votes               Vote[]
  comments            Comment[]
  bookmarks           Bookmark[]
  bookmarkCollections BookmarkCollection[]
  notifications       Notification[]
  sessions            Session[]

  // Activity tracking
  activities Activity[]

  @@map("users")
}

model OAuthProvider {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  provider   String // 'google', 'github'
  providerId String
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([provider, providerId])
  @@unique([provider, userId])
  @@map("oauth_providers")
}

model Idea {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  content     String
  category    IdeaCategory
  tags        String[]
  status      IdeaStatus   @default(DRAFT)
  authorId    String       @db.ObjectId
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Enhanced filtering fields
  techStack      String[]        @default([])
  difficulty     DifficultyLevel @default(INTERMEDIATE)
  timeCommitment TimeCommitment  @default(MEDIUM)

  // Engagement metrics
  voteScore     Int   @default(0)
  viewCount     Int   @default(0)
  commentCount  Int   @default(0)
  trendingScore Float @default(0)

  // AI enhancement
  aiEnhancedDescription String?
  aiTechStack           String[] @default([])
  aiComplexity          String?

  // Media
  images String[] @default([])

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  // Relations
  votes                   Vote[]
  comments                Comment[]
  bookmarks               Bookmark[]
  bookmarkCollectionItems BookmarkCollectionItem[]
  activities              Activity[]

  @@map("ideas")
}

model Vote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      VoteType
  userId    String   @db.ObjectId
  ideaId    String?  @db.ObjectId
  commentId String?  @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea      Idea?    @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())

  @@unique([userId, ideaId])
  @@unique([userId, commentId])
  @@map("votes")
}

model Comment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  authorId        String   @db.ObjectId
  ideaId          String   @db.ObjectId
  parentCommentId String?  @db.ObjectId
  voteScore       Int      @default(0)
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  idea          Idea       @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  parentComment Comment?   @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies       Comment[]  @relation("CommentReplies")
  votes         Vote[]
  activities    Activity[]

  @@map("comments")
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  ideaId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea      Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  tags      String[] @default([])
  notes     String?
  createdAt DateTime @default(now())

  @@unique([userId, ideaId])
  @@map("bookmarks")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  type      NotificationType
  title     String
  message   String
  data      Json?
  userId    String           @db.ObjectId
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@map("notifications")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model Activity {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  type      ActivityType
  userId    String       @db.ObjectId
  ideaId    String?      @db.ObjectId
  commentId String?      @db.ObjectId
  data      Json?
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea      Idea?        @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  comment   Comment?     @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime     @default(now())

  @@map("activities")
}

model UserPreferences {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Recommendation preferences
  preferredCategories     IdeaCategory[]
  preferredTechStack      String[]
  preferredDifficulty     DifficultyLevel[]
  preferredTimeCommitment TimeCommitment[]

  // Discovery settings
  enableRecommendations Boolean @default(true)
  enableTrending        Boolean @default(true)
  recommendationWeight  Json? // Store weights for different recommendation factors

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_preferences")
}

model BookmarkCollection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPublic    Boolean  @default(false)
  tags        String[] @default([])
  color       String? // For UI customization

  // Relations
  items BookmarkCollectionItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookmark_collections")
}

model BookmarkCollectionItem {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  collectionId String             @db.ObjectId
  ideaId       String             @db.ObjectId
  collection   BookmarkCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  idea         Idea               @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  notes        String?
  addedAt      DateTime           @default(now())

  @@unique([collectionId, ideaId])
  @@map("bookmark_collection_items")
}

model TrendingTopic {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String         @unique
  category     IdeaCategory?
  score        Float          @default(0)
  mentionCount Int            @default(0)
  period       TrendingPeriod @default(DAILY)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  calculatedAt DateTime @default(now())

  @@map("trending_topics")
}

// Enums
enum IdeaCategory {
  WEB
  MOBILE
  AI_ML
  BLOCKCHAIN
  IOT
  GAME_DEV
  DATA_SCIENCE
  CYBERSECURITY
  DEVTOOLS
  FINTECH
  HEALTHTECH
  EDTECH
  SOCIAL
  ECOMMERCE
  PRODUCTIVITY
  OTHER
}

enum IdeaStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum VoteType {
  UP
  DOWN
}

enum NotificationType {
  VOTE
  COMMENT
  FOLLOW
  MENTION
  IDEA_PUBLISHED
  SYSTEM
}

enum ActivityType {
  IDEA_CREATED
  IDEA_UPDATED
  IDEA_PUBLISHED
  IDEA_VOTED
  COMMENT_CREATED
  COMMENT_VOTED
  USER_FOLLOWED
  BOOKMARK_ADDED
  COLLECTION_CREATED
  COLLECTION_UPDATED
  IDEA_VIEWED
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum TimeCommitment {
  QUICK // < 1 week
  SHORT // 1-4 weeks
  MEDIUM // 1-3 months
  LONG // 3-6 months
  EXTENDED // > 6 months
}

enum TrendingPeriod {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}
